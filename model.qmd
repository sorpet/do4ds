---
title: "Model"
format:
  html:
    code-fold: true
---

```{r}
library(tidymodels)
library(vetiver)
library(pins)
library(plumber)
library(paws)
library(paws.storage)
```

```{r}

# con <- DBI::dbConnect(
#   duckdb::duckdb(), 
#   dbdir = "my-db.duckdb"
#   )
# df <- con |> 
#   DBI::dbReadTable("penguins") |> 
#   tibble::as_tibble() |> 
# DBI::dbDisconnect(con)
df  <- palmerpenguins::penguins |> 
  tidyr::drop_na() |> 
  select(c("body_mass_g", 'bill_length_mm', 'species', 'sex'))
df |> 
  head(3)



rec1 <- recipe(body_mass_g ~ ., data = df) |> 
  step_dummy(all_nominal_predictors())

df_dummies <- rec1 %>%
  step_dummy(all_nominal_predictors()) |>
  prep() |>
  bake(df) |> 
  relocate(body_mass_g, .after = sex_male)

```

```{r}

rec2 <- recipe(body_mass_g ~ ., data = df_dummies)

model <- 
  linear_reg()

penguin_wflow <- 
  workflow() %>% 
  add_model(model) %>% 
  add_recipe(rec2)

penguin_fit <- 
  penguin_wflow %>% 
  fit(data = df_dummies)
```

```{r}
penguin_fit %>% 
  extract_fit_parsnip() %>% 
  tidy()
```
```{r}
#reticulate::use_python("/Users/sorpet/code/do4ds/.venv/bin/python3")
#/opt/homebrew/opt/python@3.11/bin/python3 -m venv .venv
```



```{r}
v <- vetiver_model(penguin_fit, "penguin_body_mass")
v
```

```{r}
# in R, the load_dot_env function from the dotenv package reads .env file which contains secrets e.g. API keys, database passwords, etc as well as a R_CONFIG_ACTIVE variable etc.
# .env can contain secrets and thus should not be committed to git.
# the get function from the config package reads a config.yml file that contains NON SECRET environment variables that is variables that should differ between e.g. dev, test, and prod environments. 

if (file.exists(".env")) {
  dotenv::load_dot_env(file = ".env")
}
config::get("test_variable") # sets R_CONFIG_ACTIVE (=test/dev/prod/?)
#model_board <- board_folder('data/model', versioned = TRUE)
model_board <- pins::board_s3('do4ds-lab-sdp')
model_board |> vetiver_pin_write(v)
model_board |>  pin_versions("penguin_body_mass")
# rm(model_board)
```


```{python}
# from palmerpenguins import penguins
# from pandas import get_dummies
# import numpy as np
# from sklearn.linear_model import LinearRegression
# from sklearn import preprocessing
# from vetiver import VetiverModel
```

## Get Data

```{python}
# df = penguins.load_penguins().dropna()
# 
# df.head(3)
```

## Define Model and Fit

```{python}
# X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
# y = df['body_mass_g']
# model = LinearRegression().fit(X, y)
```

## Get some information

```{python}
# print(f"R^2 {model.score(X,y)}")
# print(f"Intercept {model.intercept_}")
# print(f"Columns {X.columns}")
# print(f"Coefficients {model.coef_}")
```

```{python}
# v = VetiverModel(model, model_name='penguin_model', prototype_data=X)

```

## Save to Board

